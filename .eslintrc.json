{
    /**
     * @Creater cmZhou
     * @version 7.17.0
     */
    "root": true,
    "env": {
        "browser": true,
        "es2021": true,
        "node": true
    },
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": 2021,
        "project": "tsconfig.json",
        "sourceType": "module",
        // "jsxPragma": "React",
        // "jsxFragmentName": null,
        // "lib": ["dom", "esnext"],
        // "tsconfigRootDir": null,
        // "projectFolderIgnoreList": [],
        // "extraFileExtensions": null,
        "warnOnUnsupportedTypeScriptVersion": true,
        "createDefaultProgram": false,
        "ecmaFeatures": {
            // "jsx": true,
            "globalReturn": false
        }
    },
    "plugins": [
        "eslint-plugin-react",
        "@typescript-eslint"
    ],
    "extends": [
        "eslint:all",
        "plugin:@typescript-eslint/all",
        "plugin:react/all"
    ],
    "globals": {},
    "rules": {
        //#region ts-base rules
        // 禁止不连续的函数重载
        "@typescript-eslint/adjacent-overload-signatures": "error",
        // 禁止不统一的array type定义
        "@typescript-eslint/array-type": ["error", {
            "default": "array",
            "readonly": "array"
        }],
        // 禁止对非promise的值用await
        "@typescript-eslint/await-thenable": "error",
        // 禁止使用@ts-nocheck等注释
        "@typescript-eslint/ban-ts-comment": ["error", {
            "ts-expect-error": true,
            "ts-ignore": true,
            "ts-nocheck": true,
            "ts-check": false
        }],
        // 禁止tslint的注释
        "@typescript-eslint/ban-tslint-comment": "error",
        // 禁止一些类型
        "@typescript-eslint/ban-types": ["error", {
            "types": {},
            "extendDefaults": true
        }],
        // 禁止不一致的字面量字段的定义风格
        "@typescript-eslint/class-literal-property-style": ["error", "fields"],
        // 禁止使用Record以外的语法来定义索引对象
        "@typescript-eslint/consistent-indexed-object-style": "error",
        // 禁止随意使用类型断言，且断言必需是as语法
        "@typescript-eslint/consistent-type-assertions": ["error", {
            "assertionStyle": "as",
            "objectLiteralTypeAssertions": "never"
        }],
        // 禁止使用不一致的类型定义语法（type或interface）【无需-type和interface有不同的适用场景】
        "@typescript-eslint/consistent-type-definitions": "off",
        // 禁止不一致的类型导入【ts已有】
        "@typescript-eslint/consistent-type-imports": "off",
        // 禁止省略函数的返回类型【无需】
        "@typescript-eslint/explicit-function-return-type": "off",
        // 禁止省略类成员的可见性
        "@typescript-eslint/explicit-member-accessibility": ["error", {
            "accessibility": "explicit"
        }],
        // 禁止模块导出函数省略入参和出参类型【无需】
        "@typescript-eslint/explicit-module-boundary-types": "off",
        // 禁止不一致的类型定义字段分割符
        "@typescript-eslint/member-delimiter-style": ["error", {
            "multiline": {
                "delimiter": "comma",
                "requireLast": true
            },
            "singleline": {
                "delimiter": "comma",
                "requireLast": false
            }
        }],
        // 禁止不一致的成员排序
        "@typescript-eslint/member-ordering": ["error", {
            "default": {
                "memberTypes": [
                    // Index signature
                    "signature",

                    // Static
                    "private-static-field",
                    "protected-static-field",
                    "public-static-field",
                    "static-field",

                    "private-static-method",
                    "protected-static-method",
                    "public-static-method",
                    "static-method",

                    // Constructors
                    "private-constructor",
                    "protected-constructor",
                    "public-constructor",
                    "constructor",

                    // Fields
                    "private-abstract-field",
                    "protected-abstract-field",
                    "public-abstract-field",

                    "private-decorated-field",
                    "protected-decorated-field",
                    "public-decorated-field",

                    "private-instance-field",
                    "protected-instance-field",
                    "public-instance-field",

                    "private-field",
                    "protected-field",
                    "public-field",

                    "abstract-field",
                    "decorated-field",
                    "instance-field",
                    "field",

                    // Methods
                    "private-abstract-method",
                    "protected-abstract-method",
                    "public-abstract-method",

                    "private-decorated-method",
                    "protected-decorated-method",
                    "public-decorated-method",

                    "private-instance-method",
                    "protected-instance-method",
                    "public-instance-method",

                    "private-method",
                    "protected-method",
                    "public-method",

                    "abstract-method",
                    "decorated-method",
                    "instance-method",
                    "method"
                ],
                "order": "as-written"
            }
        }],
        // 禁止不一致的函数字段定义方式
        "@typescript-eslint/method-signature-style": ["error", "method"],
        // 禁止不合规的命名【TODO】
        "@typescript-eslint/naming-convention": "off",
        // 禁止没有实在toString的成员进行字符串转换
        "@typescript-eslint/no-base-to-string": ["error", {
            "ignoredTypeNames": ["RegExp"]
        }],
        // 禁止可能产生歧义的非空断言
        "@typescript-eslint/no-confusing-non-null-assertion": "error",
        // 禁止使用返回值为void的表达式
        "@typescript-eslint/no-confusing-void-expression": [
            "error",
            {
                "ignoreArrowShorthand": true,
                "ignoreVoidOperator": true
            }
        ],
        // 禁止动态delete【无需】
        "@typescript-eslint/no-dynamic-delete": "off",
        // 禁止空interface【无需】
        "@typescript-eslint/no-empty-interface": "off",
        // 禁止使用any
        "@typescript-eslint/no-explicit-any": ["error", {
            "fixToUnknown": true
        }],
        // 禁止多余的非空断言
        "@typescript-eslint/no-extra-non-null-assertion": "error",
        // 禁止不合法的使用类（比如空类，或者只有静态成员的类）
        "@typescript-eslint/no-extraneous-class": "error",
        // 禁止忽略promise的异常处理【无需】
        "@typescript-eslint/no-floating-promises": "off",
        // 禁止使用for in
        "@typescript-eslint/no-for-in-array": "error",
        // 禁止将catch e 定义为any
        "@typescript-eslint/no-implicit-any-catch": "error",
        // 禁止无意义的类型声明
        "@typescript-eslint/no-inferrable-types": "error",
        // 禁止使用void【无需】
        "@typescript-eslint/no-invalid-void-type": "off",
        // 禁止不合法的构造函数定义
        "@typescript-eslint/no-misused-new": "error",
        // 禁止不合法的使用promise
        "@typescript-eslint/no-misused-promises": [
            "error",
            {
                "checksVoidReturn": true,
                "checksConditionals": true
            }
        ]
        //#endregion

        //#region eslint-base rules
        // 禁止方向错误的for循环
        "for-direction": "error",
        // 禁止无return的getter【ts已有】
        "getter-return": "off",
        // 禁止在new Promise时使用async【无需】
        "no-async-promise-executor": "off",
        // 禁止在for 中使用await【无需】
        "no-await-in-loop": "off",
        // 禁止比较-0
        "no-compare-neg-zero": "error",
        // 禁止在条件语句中赋值
        "no-cond-assign": ["error", "always"],
        // 禁止console
        "no-console": ["error", {
            "allow": ["error"]
        }],
        // 禁止在条件中使用常量
        "no-constant-condition": "error",
        // 禁止在正则中出现ascii中的的control字符
        "no-control-regex": "error",
        // 禁止使用debugger
        "no-debugger": "error",
        // 禁止重复的函数参数【ts已有】
        "no-dupe-args": "off",
        // 禁止重复的条件判断
        "no-dupe-else-if": "error",
        // 禁止object有重复的key【ts已有】
        "no-dupe-keys": "off",
        // 禁止switch中有重复的case
        "no-duplicate-case": "error",
        // 禁止空代码块
        "no-empty": ["error", {
            "allowEmptyCatch": true
        }],
        // 禁止包含空字符的正则
        "no-empty-character-class": "error",
        // 禁止给catch(e)中的e赋值
        "no-ex-assign": "error",
        // 禁止不必要的boolean转换
        "no-extra-boolean-cast": ["error", {
            "enforceForLogicalOperands": true
        }],
        // 禁止多余的括号
        "no-extra-parens": "error",
        // 禁止多余的分号
        "no-extra-semi": "error"
        //#endregion

    },
    // "processor": "",
    "overrides": [],
    "ignorePatterns": [],
    "settings": {},
    "noInlineConfig": false,
    "reportUnusedDisableDirectives": true
}